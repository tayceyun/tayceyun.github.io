(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{462:function(t,a,s){"use strict";s.r(a);var e=s(30),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("code",[t._v("git")]),t._v(" 作为当前最流行的代码管理工具，用好 "),a("code",[t._v("git")]),t._v(" 可以有效的提高团队开发效率")]),t._v(" "),a("h2",{attrs:{id:"常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),a("h3",{attrs:{id:"git-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-add"}},[t._v("#")]),t._v(" git add")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交当前目录下的所有变更文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交当前仓库下的所有变更文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-all")]),t._v("\n")])])]),t._v(" "),a("h3",{attrs:{id:"git-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit"}},[t._v("#")]),t._v(" git commit")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交commit 信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sss"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 提交commit 信息(可以多行)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改上次提交commit的信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--amend")]),t._v("\n")])])]),a("h3",{attrs:{id:"git-fetch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-fetch"}},[t._v("#")]),t._v(" git fetch")]),t._v(" "),a("p",[t._v("将某个远程主机的更新，全部/分支 取回本地（此时之更新了 Repository）它取回的代码对你本地的开发代码没有影响，如需彻底更新需合并或使用 "),a("code",[t._v("git pull")])]),t._v(" "),a("h3",{attrs:{id:"git-pull"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-pull"}},[t._v("#")]),t._v(" git pull")]),t._v(" "),a("p",[t._v("拉取远程主机某分支的更新，再与本地的指定分支合并（相当与 fetch 加上了合并分支功能的操作）")]),t._v(" "),a("h3",{attrs:{id:"git-push"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-push"}},[t._v("#")]),t._v(" git push")]),t._v(" "),a("p",[t._v("将本地分支的更新，推送到远程主机，其命令格式与 "),a("code",[t._v("git pull")]),t._v(" 相似\n"),a("code",[t._v("git push -f")]),t._v(" 强制推送( "),a("code",[t._v("如果本地commit和远程commit有冲突时，覆盖远程commit")]),t._v(" )")]),t._v(" "),a("h3",{attrs:{id:"分支操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),a("ul",[a("li",[t._v("使用 Git 下载指定分支命令为："),a("code",[t._v("git clone -b 分支名仓库地址")])]),t._v(" "),a("li",[t._v("拉取远程新分支 "),a("code",[t._v("git checkout -b serverfix origin/serverfix")])]),t._v(" "),a("li",[t._v("合并本地分支 "),a("code",[t._v("git merge hotfix")]),t._v("：(将 hotfix 分支合并到当前分支)")]),t._v(" "),a("li",[t._v("合并远程分支 "),a("code",[t._v("git merge origin/serverfix")])]),t._v(" "),a("li",[t._v("删除本地分支 "),a("code",[t._v("git branch -d hotfix")]),t._v("：(删除本地 hotfix 分支)")]),t._v(" "),a("li",[t._v("删除远程分支 "),a("code",[t._v("git push origin --delete serverfix")])])]),t._v(" "),a("p",[t._v("or")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-D")]),t._v(" master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //删除本地master分支\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin :master"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" //删除远程master分支\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master:master // 远程:本地\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin master:master // 本地:远程\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin master // 将本地分支与远程同名分支相关联\n")])])]),a("ul",[a("li",[t._v("上传新命名的本地分支："),a("code",[t._v("git push origin newName")]),t._v(";")]),t._v(" "),a("li",[t._v("创建新分支："),a("code",[t._v("git branch branchName")]),t._v("：(创建名为 branchName 的本地分支)")]),t._v(" "),a("li",[t._v("切换到新分支："),a("code",[t._v("git checkout branchName")]),t._v("：(切换到 branchName 分支)")]),t._v(" "),a("li",[t._v("创建并切换分支："),a("code",[t._v("git checkout -b branchName")]),t._v("：(相当于以上两条命令的合并)")]),t._v(" "),a("li",[t._v("查看本地分支："),a("code",[t._v("git branch")])]),t._v(" "),a("li",[t._v("查看远程仓库所有分支："),a("code",[t._v("git branch -a")])]),t._v(" "),a("li",[t._v("本地分支重命名： "),a("code",[t._v("git branch -m oldName newName")])]),t._v(" "),a("li",[t._v("重命名远程分支对应的本地分支："),a("code",[t._v("git branch -m oldName newName")])]),t._v(" "),a("li",[t._v("把修改后的本地分支与远程分支关联："),a("code",[t._v("git branch --set-upstream-to origin/newName")])])]),t._v(" "),a("h2",{attrs:{id:"git-分支提交、合并常见问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-分支提交、合并常见问题"}},[t._v("#")]),t._v(" git 分支提交、合并常见问题")]),t._v(" "),a("h3",{attrs:{id:"主分支领先当前分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主分支领先当前分支"}},[t._v("#")]),t._v(" 主分支领先当前分支")]),t._v(" "),a("h4",{attrs:{id:"当前分支已经提交-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当前分支已经提交-commit"}},[t._v("#")]),t._v(" 当前分支已经提交 commit")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("local")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase master\n")])])]),a("p",[a("code",[t._v("rebase")]),t._v(" 会自动合并领先的 "),a("code",[t._v("commit")])]),t._v(" "),a("h4",{attrs:{id:"未提交-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#未提交-commit"}},[t._v("#")]),t._v(" 未提交 commit")]),t._v(" "),a("p",[t._v("不用切换分支，即可同步主分支最新代码")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 有冲突解决冲突")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n")])])]),a("h2",{attrs:{id:"git-回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-回退"}},[t._v("#")]),t._v(" git 回退")]),t._v(" "),a("h3",{attrs:{id:"git-reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset"}},[t._v("#")]),t._v(" git reset")]),t._v(" "),a("p",[t._v("删除指定的 commit")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改版本库，保留暂存区，保留工作区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将版本库软回退1个版本，软回退表示将本地版本库的头指针全部重置到指定版本，且将这次提交之后的所有变更都移动到暂存区。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--soft")]),t._v(" HEAD~1\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改版本库，修改暂存区，修改工作区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将版本库回退1个版本，不仅仅是将本地版本库的头指针全部重置到指定版本，也会重置暂存区，并且会将工作区代码也回退到这个版本")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" HEAD~1\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git版本回退，回退到特定的commit_id版本，可以通过git log查看提交历史，以便确定要回退到哪个版本(commit 之后的即为ID);")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--hard")]),t._v(" commit_id\n")])])]),a("h3",{attrs:{id:"git-revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert"}},[t._v("#")]),t._v(" git revert")]),t._v(" "),a("p",[t._v("撤销 某次操作，此次操作之前和之后的 commit 和 history 都会保留，并且把这次撤销")]),t._v(" "),a("p",[t._v("作为一次最新的提交")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销前一次 commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销前前一次 commit")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD^\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# (比如：fa042ce57ebbe5bb9c8db709f719cec2c58ee7ff）撤销指定的版本，撤销也会作为一次提交进行保存。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert commit\n")])])]),a("p",[a("code",[t._v("git revert")]),t._v(" 是提交一个新的版本，将需要 "),a("code",[t._v("revert")]),t._v(" 的版本的内容再反向修改回去，\n版本会递增，不影响之前提交的内容")]),t._v(" "),a("h3",{attrs:{id:"git-revert-和-git-reset-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-revert-和-git-reset-的区别"}},[t._v("#")]),t._v(" "),a("code",[t._v("git revert")]),t._v(" 和 "),a("code",[t._v("git reset")]),t._v(" 的区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git revert")]),t._v("是用一次新的 commit 来回滚之前的 commit，"),a("code",[t._v("git reset")]),t._v("是直接删除指定的 commit。")]),t._v(" "),a("li",[t._v("在回滚这一操作上看，效果差不多。但是在日后继续 merge 以前的老版本时有区别。因为"),a("code",[t._v("git revert")]),t._v("是用一次逆向的 commit“中和”之前的提交，因此日后合并老的 branch 时，导致这部分改变不会再次出现，但是"),a("code",[t._v("git reset")]),t._v("是之间把某些 commit 在某个 branch 上删除，因而和老的 branch 再次 merge 时，这些被回滚的 commit 应该还会被引入。")]),t._v(" "),a("li",[a("code",[t._v("git reset")]),t._v(" 是把 HEAD 向后移动了一下，而"),a("code",[t._v("git revert")]),t._v("是 HEAD 继续前进，只是新的 commit 的内容和要 revert 的内容正好相反，能够抵消要被 revert 的内容。")])]),t._v(" "),a("h2",{attrs:{id:"git-commit-相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-相关"}},[t._v("#")]),t._v(" git commit 相关")]),t._v(" "),a("h3",{attrs:{id:"git-commit-提交多行-commit-信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-提交多行-commit-信息"}},[t._v("#")]),t._v(" git commit 提交多行 commit 信息")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-v")]),t._v("\n")])])]),a("h3",{attrs:{id:"git-修改-commit-信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-修改-commit-信息"}},[t._v("#")]),t._v(" git 修改 commit 信息")]),t._v(" "),a("h4",{attrs:{id:"_1-提交信息出错"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-提交信息出错"}},[t._v("#")]),t._v(" 1. 提交信息出错")]),t._v(" "),a("p",[t._v("更改 commit 信息")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--amend")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" “新提交消息”\n")])])]),a("h4",{attrs:{id:"_2-漏提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-漏提交"}},[t._v("#")]),t._v(" 2. 漏提交")]),t._v(" "),a("p",[t._v("commit 时，遗漏提交部分更新，有两种解决方案：")]),t._v(" "),a("ul",[a("li",[t._v("方案一：再次 commit")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#提交消息")]),t._v("\n")])])]),a("p",[t._v("此时，git 上会出现两次 commit")]),t._v(" "),a("ul",[a("li",[t._v("方案二：遗漏文件提交到之前 commit 上")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" missed-file "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# missed-file 为遗漏提交文件")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--amend")]),t._v(" --no-edit\n")])])]),a("p",[a("code",[t._v("--no-edit")]),t._v("   表示提交消息不会更改，在 git 上仅为一次提交")]),t._v(" "),a("h4",{attrs:{id:"修改历史的-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改历史的-commit"}},[t._v("#")]),t._v(" 修改历史的 commit")]),t._v(" "),a("p",[a("code",[t._v("git rebase -i HEAD~3")]),t._v("\n表示要修改当前版本的倒数第三次状态.\n这个命令出来之后，会出来三行东东：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("pick:*******\npick:*******\npick:*******\n")])])]),a("p",[t._v("如果你要修改哪个，就把那行的 pick 改成 edit，然后保存退出(点击 esc，输入 ZZ 退出)\n这时通过"),a("code",[t._v("git log")]),t._v("你可以发现，git 的最后一次提交已经变成你选的那个了，这时再使用：\n"),a("code",[t._v("git commit --amend")]),t._v(" 来对 commit 进行修改。\n修改完成后使用"),a("code",[t._v("git rebase --continue")]),t._v("\n然后将变化 push 到远程："),a("code",[t._v("git push origin HEAD:master --force")])]),t._v(" "),a("h3",{attrs:{id:"git-合并多个-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-合并多个-commit"}},[t._v("#")]),t._v(" git 合并多个 commit")]),t._v(" "),a("p",[t._v("过去总是使用 "),a("code",[t._v("git reset --soft")]),t._v(" 回退到之前的状态，再 commit 后 push orgin master -f 强推到远程库，能够覆盖掉之前的 commit 。")]),t._v(" "),a("p",[t._v("但在团队协作时，每次 commit 前还需要 rebase upstream，这会自动将一些其他人做的修改也自动 merge 到本地的源码中。如果此时希望覆盖前一次 commit ，reset 到之前的状态后，再次 commit 的内容就包含了其他人的修改，这不是我们希望看到的。因此，我们需要使用 git rebase -i 。")]),t._v(" "),a("h4",{attrs:{id:"基本步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本步骤"}},[t._v("#")]),t._v(" 基本步骤")]),t._v(" "),a("ol",[a("li",[t._v("git log 查看所有 commit 的情况，找到自己想要合并的 commit 之前的那个 commit 的 ssh 码(前 7 位)；")]),t._v(" "),a("li",[t._v("git rebase -i 43jk2l3，这样会弹出一个文本编辑器；\n撤销 commit\ngit reset --soft"),a("br"),t._v("\nHEAD^ 上个 commit\n^^上上个 commit\nHEAD~2 最近 2 次的提交")]),t._v(" "),a("li",[t._v("修改 pick 为 squash 会将这个 commit 合并到前一个 commit 中，保存退出；")]),t._v(" "),a("li",[t._v("提示写下新的 commit message，之前的 message 可以用#注释掉，保存退出；")]),t._v(" "),a("li",[t._v("此时再 git log 就会发现，两个 commit 被合并到一个 commit 中。")])]),t._v(" "),a("h4",{attrs:{id:"修改-push-到远程的-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改-push-到远程的-commit"}},[t._v("#")]),t._v(" 修改 push 到远程的 commit")]),t._v(" "),a("ul",[a("li",[t._v("git log")]),t._v(" "),a("li",[t._v("git rebase -i Head~8")]),t._v(" "),a("li",[t._v("pick 修改为 edit")]),t._v(" "),a("li",[t._v('git commit --amend 修改新的 commit message 保存 (修改作者信息 --author "luckyship '),a("a",{attrs:{href:"mailto:xxx@xxx.com"}},[t._v("xxx@xxx.com")]),t._v('")')]),t._v(" "),a("li",[t._v("git rebase --continue // 处理完合并后 然后 git push -f 同理 git merge --continue")]),t._v(" "),a("li",[t._v("git push -f")])]),t._v(" "),a("h3",{attrs:{id:"commit-message-前缀规范提要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-前缀规范提要"}},[t._v("#")]),t._v(" Commit message 前缀规范提要")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("code")]),t._v(" "),a("th",[t._v("info")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("strong",[t._v("feat")]),t._v(":msg")]),t._v(" "),a("td",[t._v("新功能 feature")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("fix")]),t._v(":msg")]),t._v(" "),a("td",[t._v("修复 bug")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("merge")]),t._v(":msg")]),t._v(" "),a("td",[t._v("merge 信息")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("docs")]),t._v(":msg")]),t._v(" "),a("td",[t._v("文档修改")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("style")]),t._v(":msg")]),t._v(" "),a("td",[t._v("格式，不影响代码运行的变动")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("refactor")]),t._v(": msg")]),t._v(" "),a("td",[t._v("重构即不是新增功能，也不是修改 bug 的代码变动")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("test")]),t._v(":msg")]),t._v(" "),a("td",[t._v("增加测试")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("chore")]),t._v(":msg")]),t._v(" "),a("td",[t._v("构建过程或辅助工具的变动")])]),t._v(" "),a("tr",[a("td",[a("strong",[t._v("rm")]),t._v(":msg")]),t._v(" "),a("td",[t._v("删除文件或代码")])])])]),t._v(" "),a("h2",{attrs:{id:"git-stash-暂存区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-暂存区"}},[t._v("#")]),t._v(" git stash(暂存区)")]),t._v(" "),a("h3",{attrs:{id:"暂存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂存"}},[t._v("#")]),t._v(" 暂存")]),t._v(" "),a("p",[a("code",[t._v("git stash")]),t._v(" 可用来暂存当前正在进行的工作，比如想 pull 最新代码又不想 commit ， 或者另为了修改一个紧急的 bug ，先 stash，使返回到自己上一个 commit, ，改完 bug 之后再 stash pop , 继续原来的工作；")]),t._v(" "),a("ul",[a("li",[t._v("添加缓存栈： "),a("code",[t._v("git stash")]),t._v(" ;")]),t._v(" "),a("li",[t._v("查看缓存栈： "),a("code",[t._v("git stash list")]),t._v(" ;")]),t._v(" "),a("li",[t._v("推出缓存栈： "),a("code",[t._v("git stash pop")]),t._v(" ;")]),t._v(" "),a("li",[t._v("取出特定缓存内容： "),a("code",[t._v("git stash apply stash@{1}")]),t._v(" ;")])]),t._v(" "),a("h3",{attrs:{id:"恢复误删除的-stash"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#恢复误删除的-stash"}},[t._v("#")]),t._v(" 恢复误删除的 stash")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 显示所有不可访问对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fask "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--unreachable")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" show 302063e31742cbce7c5fdb917edf520183154cc1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" D:"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("recovery"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("backup.txt\n")])])]),a("blockquote",[a("p",[t._v("在使用 git fsck –unreachable 命令输出的很多文件里面，有很多是带有 commit 和 tree 的标识的，这些可以使用 git stash apply 加标记号进行找回。而 blob 的文件是只能手动拷贝的，或者像上面一样使用> 输出到指定的路径去")])]),t._v(" "),a("h2",{attrs:{id:"rebase-和-mege-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rebase-和-mege-的区别"}},[t._v("#")]),t._v(" rebase 和 mege 的区别")]),t._v(" "),a("h3",{attrs:{id:"_1-拉取代码-pull-rebase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-拉取代码-pull-rebase"}},[t._v("#")]),t._v(" 1. 拉取代码 pull --rebase")]),t._v(" "),a("p",[t._v("在团队协作过程中，假设你和你的同伴在本地中分别有各自的新提交，而你的同伴先于你 "),a("code",[t._v("push")]),t._v(" 了代码到远程分支上，所以你必须先执行 "),a("code",[t._v("git pull")]),t._v(" 来获取同伴的提交，然后才能 "),a("code",[t._v("push")]),t._v(" 自己的提交到远程分支。")]),t._v(" "),a("p",[t._v("而按照 Git 的默认策略，如果远程分支和本地分支之间的提交线图有分叉的话（即不是 fast-forwarded），Git 会执行一次 "),a("code",[t._v("merge")]),t._v(" 操作，因此产生一次没意义的提交记录，从而造成了像上图那样的混乱。")]),t._v(" "),a("p",[t._v("其实在 pull 操作的时候，，使用 "),a("code",[t._v("git pull --rebase")]),t._v(" 选项即可很好地解决上述问题。 加上 "),a("code",[t._v("--rebase")]),t._v(" 参数的作用是，提交线图有分叉的话，Git 会 rebase 策略来代替默认的 merge 策略。")]),t._v(" "),a("p",[t._v("假设提交线图在执行 pull 前是这样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                 A---B---C  remotes/origin/master\n                /\n           D---E---F---G  master\n")])])]),a("p",[t._v("如果是执行 "),a("code",[t._v("git pull")]),t._v(" 后，提交线图会变成这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                 A---B---C remotes/origin/master\n                /         \\\n           D---E---F---G---H master\n")])])]),a("p",[t._v("结果多出了 "),a("code",[t._v("H")]),t._v(" 这个没必要的提交记录。如果是执行 "),a("code",[t._v("git pull --rebase")]),t._v(" 的话，提交线图就会变成这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("                       remotes/origin/master\n                           |\n           D---E---A---B---C---F'---G'  master\n")])])]),a("p",[a("code",[t._v("F")]),t._v(" "),a("code",[t._v("G")]),t._v(" 两个提交通过 "),a("code",[t._v("rebase")]),t._v(" 方式重新拼接在 "),a("code",[t._v("C")]),t._v(" 之后，多余的分叉去掉了，目的达到。")]),t._v(" "),a("h4",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("大多数时候，使用 "),a("code",[t._v("git pull --rebase")]),t._v(" 是为了使提交线图更好看，从而方便 code review。")]),t._v(" "),a("p",[t._v("不过，如果你对使用 git 还不是十分熟练的话，我的建议是 "),a("code",[t._v("git pull --rebase")]),t._v(" 多练习几次之后再使用，因为 "),a("strong",[t._v("rebase 在 git 中，算得上是『危险行为』")]),t._v("。")]),t._v(" "),a("p",[t._v("另外，还需注意的是，使用 "),a("code",[t._v("git pull --rebase")]),t._v(" 比直接 pull 容易导致冲突的产生，如果预期冲突比较多的话，建议还是直接 pull。")]),t._v(" "),a("p",[t._v("注意：\ngit pull = git fetch + git merge\ngit pull --rebase = git fetch + git rebase")]),t._v(" "),a("h3",{attrs:{id:"_2-合代码-merge-no-ff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-合代码-merge-no-ff"}},[t._v("#")]),t._v(" 2. 合代码 merge --no-ff")]),t._v(" "),a("p",[t._v("上述的 "),a("code",[t._v("git pull --rebase")]),t._v(" 策略目的是修整提交线图，使其形成一条直线，而即将要用到的 "),a("code",[t._v("git merge --no-ff <branch-name>")]),t._v(" 策略偏偏是反行其道，刻意地弄出提交线图分叉出来。")]),t._v(" "),a("p",[t._v("假设你在本地准备合并两个分支，而刚好这两个分支是 fast-forwarded 的，那么直接合并后你得到一个直线的提交线图，当然这样没什么坏处，但如果你想更清晰地告诉你同伴："),a("strong",[t._v("这一系列的提交都是为了实现同一个目的")]),t._v("，那么你可以刻意地将这次提交内容弄成一次提交线图分叉。")]),t._v(" "),a("p",[t._v("执行 "),a("code",[t._v("git merge --no-ff <branch-name>")]),t._v(" 的结果大概会是这样的：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("|\n0 asdasd\n|\n0 asdasd\n|\\\n| 0 asdasd\n| |\n| 0 asdasd\n| |\n| 0 asdasd\n| |\n| 0 asdasd\n| /\n0 asdasd\n|\n0 asdasd\n")])])]),a("p",[t._v("中间的分叉线路图很清晰的显示这些提交都是为了实现 "),a("strong",[t._v("complete adjusting user domains and tags")])]),t._v(" "),a("h3",{attrs:{id:"更进一步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更进一步"}},[t._v("#")]),t._v(" 更进一步")]),t._v(" "),a("p",[t._v("往往我的习惯是，在合并分支之前（假设要在本地将 feature 分支合并到 dev 分支），会先检查 feature 分支是否『部分落后』于"),a("strong",[t._v("远程 dev 分支")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout dev\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 更新 dev 分支")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log feature"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("dev\n")])])]),a("p",[t._v("如果没有输出任何提交信息的话，即表示 feature 对于 dev 分支是 up-to-date 的。如果有输出的话而马上执行了 "),a("code",[t._v("git merge --no-ff")]),t._v(" 的话，提交线图会变成这样：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("|\n0 asdasd\n|\n0 asdasd\n|\\\n| 0 asdasd\n| |\n| 0 asdasd\n| |\n0 | asdasd\n| |\n0 | asdasd\n| /\n0 asdasd\n|\n0 asdasd\n")])])]),a("p",[t._v("所以这时在合并前，通常我会先执行：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase dev\n")])])]),a("p",[t._v("这样就可以将 feature 重新拼接到更新了的 dev 之后，然后就可以合并了，最终得到一个干净舒服的提交线图。")]),t._v(" "),a("p",[a("strong",[t._v("再次提醒：像之前提到的，rebase 是『危险行为』，建议你足够熟悉 git 时才这么做，否则的话是得不偿失的。")])]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git pull --rebase")]),t._v(" 和 "),a("code",[t._v("git merge --no-ff")]),t._v(" 其实和直接使用 "),a("code",[t._v("git pull")]),t._v(" "),a("code",[t._v("git merge")]),t._v(" 得到的代码应该是一样。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("git pull --rebase")]),t._v(" 主要是为是将提交的线图平坦化，而 "),a("code",[t._v("git merge --no-ff")]),t._v(" 则是刻意制造分叉。")]),t._v(" "),a("p",[t._v("git rebase 和 git merge 主要的区别在于是否保留分支的 commit 提交节点，rebase 会给你一个简洁的线性历史树。rebase 适合小分支，大分支还是使用 merge --squash。")]),t._v(" "),a("h2",{attrs:{id:"git-patch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-patch"}},[t._v("#")]),t._v(" git patch")]),t._v(" "),a("p",[a("code",[t._v("git patch")]),t._v(" 会生成一个补丁文件，这样在不能直接 "),a("code",[t._v("git pull")]),t._v(" 和 "),a("code",[t._v("git push")]),t._v(" 的情况下，直接把补丁文件合入 "),a("code",[t._v("git")]),t._v(" 项目中")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1为最新commit往前的commit的数量")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" format-patch "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-1")]),t._v("\n\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" am xxx.patch\n")])])]),a("h2",{attrs:{id:"git-cherry-pick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick"}},[t._v("#")]),t._v(" git cherry-pick")]),t._v(" "),a("p",[t._v("现网发现了 bug，现网分支需要修改代码出补丁版本；同时，代码也要合入主干，保证主干版本没问题。\n简言之，相同的代码，要合入两个分支，怎么办")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch\n* dev\n  master\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick 4c805e2\n")])])]),a("h2",{attrs:{id:"同步-github-fork-出来的分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步-github-fork-出来的分支"}},[t._v("#")]),t._v(" 同步 Github fork 出来的分支")]),t._v(" "),a("h3",{attrs:{id:"_1、配置-remote-指向原始仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、配置-remote-指向原始仓库"}},[t._v("#")]),t._v(" 1、配置 remote，指向原始仓库")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" upstream https://github.com/luckyship/jelly.git\n")])])]),a("h3",{attrs:{id:"_2、获取上游分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、获取上游分支"}},[t._v("#")]),t._v(" 2、获取上游分支")]),t._v(" "),a("p",[t._v("上游仓库获取到分支，及相关的提交信息，它们将被保存在本地的 upstream/master 分支")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch upstream\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remote: Counting objects: 75, done.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remote: Compressing objects: 100% (53/53), done.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# remote: Total 62 (delta 27), reused 44 (delta 9)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Unpacking objects: 100% (62/62), done.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# From https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# * [new branch] master -upstream/master")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3、切换到本地的-master-分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、切换到本地的-master-分支"}},[t._v("#")]),t._v(" 3、切换到本地的 master 分支")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Switched to branch 'master'")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4、合并分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、合并分支"}},[t._v("#")]),t._v(" 4、合并分支")]),t._v(" "),a("p",[t._v("把 upstream/master 分支合并到本地的 master 分支，本地的 master 分支便跟上游仓库保持同步了，并且没有丢失本地的修改。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge upstream/master\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Updating a422352..5fdff0f")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fast-forward")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# README | 9 -------")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# README.md | 7 ++++++")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2 files changed, 7 insertions(+), 9 deletions(-)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete mode 100644 README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create mode 100644 README.md")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5、上传到自己的远程仓库中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、上传到自己的远程仓库中"}},[t._v("#")]),t._v(" 5、上传到自己的远程仓库中")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),a("h2",{attrs:{id:"git-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-配置"}},[t._v("#")]),t._v(" git 配置")]),t._v(" "),a("h3",{attrs:{id:"邮箱和用户名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#邮箱和用户名"}},[t._v("#")]),t._v(" 邮箱和用户名")]),t._v(" "),a("h4",{attrs:{id:"查看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看"}},[t._v("#")]),t._v(" 查看")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.name\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config user.email\n")])])]),a("h4",{attrs:{id:"修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改"}},[t._v("#")]),t._v(" 修改")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"email"')]),t._v("\n")])])]),a("h3",{attrs:{id:"ssh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ssh"}},[t._v("#")]),t._v(" SSH")]),t._v(" "),a("ol",[a("li",[t._v("查看是否生成了 SSH 公钥")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" ~/.ssh\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nid_rsa      id_rsa.pub      known_hosts\n")])])]),a("p",[t._v("其中 id_rsa 是私钥，id_rsa.pub 是公钥。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("如果没有那就开始生成，设置全局的 user.name 与 user.email")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--list")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看是否设置了user.name与user.email，没有的话，去设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置全局的user.name与user.email")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.name "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XX"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--global")]),t._v(" user.email "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XX"')]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("输入 ssh-keygen 即可（或"),a("code",[t._v('ssh-keygen -t rsa -C "email"')]),t._v("）")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ ssh-keygen\nGenerating public/private rsa key pair.\nEnter "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("which")]),t._v(" to save the key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("/Users/schacon/.ssh/id_rsa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\nEnter passphrase "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("empty "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" no passphrase"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(":\nEnter same passphrase again:\nYour identification has been saved "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /Users/schacon/.ssh/id_rsa.\nYour public key has been saved "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" /Users/schacon/.ssh/id_rsa.pub.\nThe key fingerprint is:\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[t._v("生成之后获取公钥内容，输入 cat ~/.ssh/id_rsa.pub 即可， 复制 ssh-rsa 一直到 .local 这一整段内容")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" ~/.ssh/id_rsa.pub\nssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\nGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\nPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\nt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\nmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\nNrRFi9wrf+M7Q"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" schacon@agadorlaptop.local\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("打开 GitLab 或者 GitHub，点击头像，找到设置页")]),t._v(" "),a("li",[t._v("左侧找到 SSH keys 按钮并点击，输入刚刚复制的公钥即可")])]),t._v(" "),a("h3",{attrs:{id:"git-push-报-http-basic-access-denied-错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-push-报-http-basic-access-denied-错误"}},[t._v("#")]),t._v(" git push 报 HTTP Basic: Access denied 错误")]),t._v(" "),a("ul",[a("li",[t._v("永久记住密码\n"),a("code",[t._v("git config --global credential.helper store")])])]),t._v(" "),a("p",[t._v("如果没 "),a("code",[t._v("--global")]),t._v(" ，则在当前项目下的.git/config 文件中添加。")]),t._v(" "),a("ul",[a("li",[t._v("默认记住 15 分钟")])]),t._v(" "),a("blockquote",[a("p",[t._v("git config --global credential.helper cache")])]),t._v(" "),a("ul",[a("li",[t._v("自定义配置记住 1 小时：")])]),t._v(" "),a("blockquote",[a("p",[t._v("git config --global credential.helper 'cache –timeout=3600'")])]),t._v(" "),a("p",[t._v("解决方案：")]),t._v(" "),a("ol",[a("li",[t._v("如果账号密码有变动 用这个命令 "),a("code",[t._v("git config --system --unset credential.helper")]),t._v(" (清除用户名密码)重新输入账号密码应该就能解决了")]),t._v(" "),a("li",[t._v("如果用了第一个命令 还不能解决问题那么 用这个命令：\n"),a("code",[t._v("git config –global http.emptyAuth true")])])]),t._v(" "),a("h3",{attrs:{id:"文件名过长错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件名过长错误"}},[t._v("#")]),t._v(" 文件名过长错误")]),t._v(" "),a("p",[t._v("Filename too long warning: Clone succeeded, but checkout failed.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--system")]),t._v(" core.longpaths "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("h3",{attrs:{id:"gitignore-更新后生效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gitignore-更新后生效"}},[t._v("#")]),t._v(" "),a("code",[t._v(".gitignore")]),t._v(" 更新后生效：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--cached")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-m")]),t._v(" .gitignore is now working\n")])])]),a("h3",{attrs:{id:"git-commit-v-使用-vim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-v-使用-vim"}},[t._v("#")]),t._v(" "),a("code",[t._v("git commit -v")]),t._v(" 使用 "),a("code",[t._v("vim")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" ~/.gitconfig\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\temail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" chaox.a.xu@intel.com\n\tname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Xu Chao\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\teditor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-U")]),t._v(" none           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# git commit -sv 可以用vim")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"git-统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-统计"}},[t._v("#")]),t._v(" git 统计")]),t._v(" "),a("h3",{attrs:{id:"查看-git-上个人代码量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看-git-上个人代码量"}},[t._v("#")]),t._v(" 查看 git 上个人代码量")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--author")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tformat: "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--numstat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }'")]),t._v(" -\n")])])]),a("h3",{attrs:{id:"统计每个人的增删行数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统计每个人的增删行数"}},[t._v("#")]),t._v(" 统计每个人的增删行数")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--format")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%aN'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("read")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-en")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),a("span",{pre:!0,attrs:{class:"token entity",title:"\\t"}},[t._v("\\t")]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--author")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$name")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("tformat: "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--numstat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }'")]),t._v(" -"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),a("h3",{attrs:{id:"查看仓库提交者排名前-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看仓库提交者排名前-5"}},[t._v("#")]),t._v(" 查看仓库提交者排名前 5")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%aN'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("uniq")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-c")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-k1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-r")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("head")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("h3",{attrs:{id:"贡献者统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贡献者统计"}},[t._v("#")]),t._v(" 贡献者统计")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--pretty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%aN'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-u")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-l")]),t._v("\n")])])]),a("h3",{attrs:{id:"提交数统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交数统计"}},[t._v("#")]),t._v(" 提交数统计")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--oneline")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-l")]),t._v("\n")])])]),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("p",[t._v("本文参考了\n"),a("a",{attrs:{href:"https://mydearest.cn/",target:"_blank",rel:"noopener noreferrer"}},[t._v("git 相关问题场景和命令"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端"}},[t._v("#")]),t._v(" 客户端")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("sourcetree"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.git-tower.com/mac",target:"_blank",rel:"noopener noreferrer"}},[t._v("Tower"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.sublimemerge.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("sublimemerge"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.gitkraken.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitkraken"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.git-fork.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("git-fork"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://gitup.co/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitup"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"练习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习"}},[t._v("#")]),t._v(" 练习")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/pcottle/learnGitBranching",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 命令可视化学习"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=r.exports}}]);